---
layout: post
title:  "GraphQL 이란?"
author: Hyunseok
categories: tech
comments: true
---

# GraphQL 이란?
- Facebook에서 만든 **단일 End-Point의 쿼리 언어**.
- 2015년에 처음으로 공개되었고, 2016년 10월에 Stable 버전이 출시.
- **API를 요청하는 URL은 하나**, 클라이언트에서 필요한 데이터를 쿼리로 통해 조회.
- REST API와는 다른 새로운 API 디자인 아키텍처.
- **GraphQL의 핵심은, 리소스를 url이 아니라 Query를 통해 표현**하는 것이다.
- Github, Facebook, Pinterest에서 주로 사용 중.


## 장점
- 데이터의 변동에 따라 API를 새로 만들 필요가 없어짐.
- Web, Mobile API를 별도로 만들 필요가 없음.
- **OverFetching**, **UnderFetching** 이슈 해결.
- 기존 데이터베이스 위에 **(GraphQL)스키마**만 추가해서 사용 가능.

### OverFetching
- 내가 필요한 정보보다 많은 정보를 서버한테 받는 내용
- Ex) 사용자 정보 조회 시, 내가 필요한건 이름과 이메일인데 관련된 성별, 나이 등도 같이 전달 되어 오는 경우.

### UnderFetching
- 페이지에서 필요한 정보를 표시하기 위해 클라이언트에서 여러 Rest API를 호출하는 경우

## 단점
- 클라이언트 코드량 증가
- 서버에서 오는 Response 양은 감소하지만 쿼리를 보내는 Client의 Request양은 증가.

## 구현
### Schema (Server)
- 클라이언트에게 보내거나 받을 Data의 설명
```
type Photo {
    id: Int! // !는 사용의 강제성을 부여.
    albumId: Int
    title: String
    url: String
    thumbnailUrl: String
}

type Album {
    id: Int!
    userId: Int!
    title: String!
}

type Query{
    photos(albumId: Int, current: Int, limit: Int): [Photo]
    albums(current: Int, limit: Int): [Album]
}
```

### Resolver (Server)
- 쿼리 요청의 해결(resolve), 응답해주는 중간 역할
```
const resolvers = {
  Query: {
    photos: (context, { albumId, current, limit }) => getPhotos(albumId, current, limit),
    albums: (context, { current, limit }) => getAlbums(current, limit),
};

export default resolvers;
```

### Queries (Client)
- 발송할 쿼리 내용
```
export const ALBUM_LIST = gql`
    {
        albums(current: 1, limit: 10) {
            id
            userId
            title
        }
    }
`;

export const PHOTO_LIST = gql`
    query photos($albumId: Int!) {
        photos(albumId: $albumId, current: 1, limit: 10) {
            id
            albumId
            title
            url
        }
    }
`;
```

### Request Query with React-Hooks (Client)
```
import React from 'react';
import { useQuery } from '@apollo/react-hooks';
import { ALBUM_LIST } from 'client/queries';
import Album from 'client/components/Album';

const Home = () => {
  const { loading, error, data } = useQuery(ALBUM_LIST);

  if (loading) {
    return 'Loading';
  }

  if (error) {
    return 'Loading Error';
  }

  return (
    <div>
      {
        data && data.albums && data.albums.map((item) => {
          return <Album key={item.id} albumId={item.id} title={item.title}/>;
        })
      }
    </div>);
};

export default Home;
```

### 소스 원본
- [Github](https://github.com/devhyunseok/album-react-graphql)

### [Graphql-yoga](https://github.com/prisma/graphql-yoga)
- GraphQL을 빠르게 시작할수 있는 GraphQL 서버 템플릿.

### [React-Apollo](https://www.apollographql.com/docs/react/)
- React의 GraphQL 상태 관리 라이브러리.

## 참고 문언
- [공식 문서](https://graphql.org/learn/)
- [한글화 공식 문서](https://graphql-kr.github.io/learn/)
- [GraphQL 이란 무엇인가](https://samslow.me/development/2019/07/31/GraphQL이란-무엇인가%28feat.-무한한-공간-저-너머로%29/)
